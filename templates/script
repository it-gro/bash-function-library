#!/usr/bin/env bash

#------------------------------------------------------------------------------
# @file
# Does something. # TODO
#
# Detailed description. Use multiple lines if needed. # TODO
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# @function
# Displays usage message.
#
# @return String $msg
#   The usage message.
#------------------------------------------------------------------------------
usage() {
  declare msg
  msg=$(cat <<EOT
One sentence description. # TODO

Detailed description. Use multiple lines if needed. # TODO

Usage:    $(basename "$0") foo bar # TODO

Example:  $(basename "$0") "Fred" "George" # TODO
EOT
  )
  printf "%s\\n" "${msg}"
  }

#------------------------------------------------------------------------------
# @function
# Performs cleanup when script exits for any reason. Called by trap.
#
# Detailed description. Use multiple lines if needed. # TODO
#------------------------------------------------------------------------------
cleanup() {
  # TODO
  :
  }

#------------------------------------------------------------------------------
# @function
# Main function.
#
# Detailed description. Use multiple lines if needed. # TODO
#
# @param type $foo # TODO
#   Description. # TODO
#
# @param type $bar # TODO
#   Description. # TODO
#
# shellcheck disable=1090
#------------------------------------------------------------------------------
main() {
  # Verify argument count.
  [[ $# -eq 2 ]] || { usage; return 1; }
  # bfl::verify_arg_count "$#" 2 2 || bfl::die "arguments count $# â‰  2." ${BFL_ErrCode_Not_verified_args_count}

  # Display usage message if requested.
# [[ "$#" -gt 0 &&
  [[               ("$1" = "-h" || "$1" = "--help") ]] && { usage; return 0; }

  # Source the Bash Function Library.
  if ! source "${BASH_FUNCTIONS_LIBRARY}"; then
    printf "Error. Unable to source BASH_FUNCTIONS_LIBRARY.\\n" 1>&2
    return 1
  fi

  # Verify dependencies.     # TODO
  bfl::verify_dependencies 'printf' || return $?

  # Declare positional arguments (readonly, sorted by position).
  local -r foo="$1" # TODO
  local -r bar="$2" # TODO

  # Declare readonly variables (sorted by name).
  local -r wibble="Harry" # TODO
  local -r wobble="Ron" # TODO

  # Declare all other variables (sorted by name).
  local eggs="Dean" # TODO
  local ham="Seamus" # TODO

  # Verify argument values.
  bfl::is_empty "${foo}" && { bfl::error "Foo is required."; return 1; } # TODO
  bfl::is_empty "${bar}" && { bfl::error "Bar is required."; return 1; } # TODO

  # TODO
  printf "%s\\n" "${foo}, ${bar}, ${wibble}, ${wobble}, ${eggs}, and ${ham}."
  }

set -euo pipefail
trap cleanup EXIT
main "$@"